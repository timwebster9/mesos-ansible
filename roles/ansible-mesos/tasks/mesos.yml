---
# == Work Dir for replicated log
- name: create work dir
  file: path={{ mesos_work_dir }} state=directory

# == Remove default configs
- name: Remove Default Mesos Configs
  file: state=absent path=/etc/mesos/

- name: Remove Mesos ZK File
  file: state=absent path=/etc/mesos/zk

- name: Remove Default Mesos-Master Config
  file: state=absent path=/etc/mesos-master/

- name: Remove Default Mesos-Slave Config
  file: state=absent path=/etc/mesos-slave/

- name: Remove Existing Zookeeper id
  file: state=absent path=/var/lib/zookeeper/myid

- name: Remove Existing Zookeeper config
  file: state=absent path=/etc/zookeeper/conf/zoo.cfg

# == Configure and recreate
- name: Mesos default config file
  template: src=conf-mesos.j2 dest=/etc/default/mesos
  notify:
    - Restart mesos-master
    - Restart mesos-slave
    - Cleanup meta/slaves/latest

- name: Mesos Master config file
  template: src=conf-mesos-master.j2 dest=/etc/default/mesos-master
  when: mesos_install_mode == "master" or mesos_install_mode == "master-slave"
  notify:
    - Restart mesos-master

- name: Mesos Slave config file
  template: src=conf-mesos-slave.j2 dest=/etc/default/mesos-slave
  when: mesos_install_mode == "slave" or mesos_install_mode == "master-slave"
  notify:
    - Restart mesos-slave
    - Cleanup meta/slaves/latest

- name: Mesos master upstart script
  template: src=init-mesos-master.j2 dest=/etc/init/mesos-master.conf
  when:
    - (mesos_install_mode == "master" or mesos_install_mode == "master-slave")
    - ansible_service_mgr != 'systemd'
  notify:
    - Restart mesos-master

- name: Mesos slave upstart script
  template: src=init-mesos-slave.j2 dest=/etc/init/mesos-slave.conf
  when:
    - (mesos_install_mode == "slave" or mesos_install_mode == "master-slave")
    - ansible_service_mgr != 'systemd'
  notify:
    - Restart mesos-slave

- name: Check if systemd exists
  stat: path=/lib/systemd/system/
  register: systemd_check

- name: Zookeeper ID file
  template: src=myid.j2 dest=/var/lib/zookeeper/myid
  when: (mesos_install_mode == "master" or mesos_install_mode == "master-slave")

- name: Zookeeper conf file
  template: src=zoo.cfg.j2 dest=/etc/zookeeper/conf/zoo.cfg
  when: (mesos_install_mode == "master" or mesos_install_mode == "master-slave")

- name: Zookeeper systemd script
  template: src=zookeeper.service.j2 dest=/lib/systemd/system/zookeeper.service
  when: (mesos_install_mode == "master" or mesos_install_mode == "master-slave") and systemd_check.stat.exists == true
  notify:
    - Reload daemon

- name: Start Zookeeper service
  service: name=zookeeper state=started
  when: (mesos_install_mode == "master" or mesos_install_mode == "master-slave") and systemd_check.stat.exists == true

- name: Mesos master systemd script
  template: src=mesos-master.service.j2 dest=/lib/systemd/system/mesos-master.service
  when: (mesos_install_mode == "master" or mesos_install_mode == "master-slave") and systemd_check.stat.exists == true
  notify:
    - Reload daemon
    - Restart mesos-master

- name: Mesos slave systemd script
  template: src=mesos-slave.service.j2 dest=/lib/systemd/system/mesos-slave.service
  when: (mesos_install_mode == "slave" or mesos_install_mode == "master-slave") and systemd_check.stat.exists == true
  notify:
    - Reload daemon
    - Restart mesos-slave

- name: Enable/Disable Zookeeper service
  service: name=zookeeper enabled="{{ (mesos_install_mode == 'slave') | ternary('no', 'yes') }}"
  when: systemd_check.stat.exists == true

- name: Enable/Disable mesos-master service
  service: name=mesos-master enabled="{{ (mesos_install_mode == 'slave') | ternary('no', 'yes') }}"
  when: systemd_check.stat.exists == true

- name: Enable/Disable mesos-slave service
  service: name=mesos-slave enabled="{{ (mesos_install_mode == 'master') | ternary('no', 'yes') }}"
  when: systemd_check.stat.exists == true

- name: Create docker config dir
  file: path=/root/.docker state=directory mode=0700
  when: mesos_containerizers | search("docker")

- name: Install docker config
  template: src=conf-docker.j2 dest=/root/.docker/config.json
  when: mesos_containerizers | search("docker")
